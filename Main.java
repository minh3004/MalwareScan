package Scan;

import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

class SignatureDatabase {
    private List<String> signatures;

    public SignatureDatabase() {
        this.signatures = new ArrayList<>();
    }

    public void loadSignaturesFromFile(String filePath) {
        try (Scanner scanner = new Scanner(new File(filePath))) {
            while (scanner.hasNextLine()) {
                addSignature(scanner.nextLine().trim());
            }
        } catch (IOException e) {
            System.out.println("Error reading signatures file: " + e.getMessage());
        }
    }

    public void addSignature(String signature) {
        signatures.add(signature);
    }

    public boolean containsSignature(String signature) {
        return signatures.contains(signature);
    }

    public List<String> getSignatures() {
        return signatures;
    }
}

class FileScanner {
    private SignatureDatabase database;

    public FileScanner(SignatureDatabase database) {
        this.database = database;
    }

    public String calculateMD5(File file) {
        try (FileInputStream fis = new FileInputStream(file)) {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                md.update(buffer, 0, bytesRead);
            }
            byte[] digest = md.digest();
            StringBuilder sb = new StringBuilder();
            for (byte b : digest) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (IOException | NoSuchAlgorithmException e) {
            System.out.println("Error calculating MD5 for file: " + file.getName() + " - " + e.getMessage());
            return null;
        }
    }

    public boolean scanFile(File file) {
        String fileMD5 = calculateMD5(file);
        return fileMD5 != null && database.containsSignature(fileMD5);
    }
}

class MalwareRemover {
    public boolean removeFile(File file) {
        return file.delete();
    }
}

class MalwareScanner {
    private FileScanner fileScanner;
    private MalwareRemover malwareRemover;
    private final ExecutorService executorService;

    public MalwareScanner(FileScanner fileScanner, MalwareRemover malwareRemover) {
        this.fileScanner = fileScanner;
        this.malwareRemover = malwareRemover;
        this.executorService = Executors.newFixedThreadPool(10);
    }

    public void scanMalware(File directory, JTextArea logArea) {
        if (directory.isDirectory()) {
            for (File file : directory.listFiles()) {
                if (file.isFile()) {
                    executorService.submit(() -> {
                        if (fileScanner.scanFile(file)) {
                            SwingUtilities.invokeLater(() -> logArea.append("Recognized file: " + file.getName() + "\n"));
                        }
                    });
                } else if (file.isDirectory()) {
                    scanMalware(file, logArea);
                }
            }
        } else {
            logArea.append("Not a directory: " + directory.getName() + "\n");
        }
    }

    public void removeMalware(File directory, JTextArea logArea) {
        if (directory.isDirectory()) {
            for (File file : directory.listFiles()) {
                if (file.isFile()) {
                    executorService.submit(() -> {
                        if (fileScanner.scanFile(file)) {
                            if (malwareRemover.removeFile(file)) {
                                SwingUtilities.invokeLater(() -> logArea.append("Removed malware file: " + file.getName() + "\n"));
                            } else {
                                SwingUtilities.invokeLater(() -> logArea.append("Failed to remove file: " + file.getName() + "\n"));
                            }
                        }
                    });
                } else if (file.isDirectory()) {
                    removeMalware(file, logArea);
                }
            }
        } else {
            logArea.append("Not a directory: " + directory.getName() + "\n");
        }
    }

    public void shutdownAndAwaitTermination() {
        executorService.shutdown();
        try {
            if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                executorService.shutdownNow();
                if (!executorService.awaitTermination(60, TimeUnit.SECONDS))
                    System.err.println("Executor service did not terminate");
            }
        } catch (InterruptedException ie) {
            executorService.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }
}

public class Main extends JFrame {
    private SignatureDatabase database;
    private FileScanner fileScanner;
    private MalwareRemover malwareRemover;
    private MalwareScanner malwareScanner;

    private JTextField directoryField;
    private JTextArea logArea;
    private JButton scanButton, removeButton;
    private JButton browseButton;

    public Main() {
        database = new SignatureDatabase();
        database.loadSignaturesFromFile("D:\\PTMD\\Project\\Scan\\signatures.txt");

        fileScanner = new FileScanner(database);
        malwareRemover = new MalwareRemover();
        malwareScanner = new MalwareScanner(fileScanner, malwareRemover);

        initComponents();
    }

    private void initComponents() {
        setTitle("Malware Scanner");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        directoryField = new JTextField(20);
        logArea = new JTextArea();
        logArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(logArea);
        scanButton = new JButton("Scan");
        removeButton = new JButton("Remove");
        browseButton = new JButton("Browse");

        browseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int option = fileChooser.showOpenDialog(Main.this);
                if (option == JFileChooser.APPROVE_OPTION) {
                    File selectedDirectory = fileChooser.getSelectedFile();
                    directoryField.setText(selectedDirectory.getAbsolutePath());
                }
            }
        });

        scanButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String directoryPath = directoryField.getText();
                File directory = new File(directoryPath);
                if (directory.exists() && directory.isDirectory()) {
                    logArea.setText("Scanning directory: " + directoryPath + "\n");
                    malwareScanner.scanMalware(directory, logArea);
                    malwareScanner.shutdownAndAwaitTermination();
                } else {
                    logArea.setText("Invalid directory: " + directoryPath + "\n");
                }
            }
        });

        removeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String directoryPath = directoryField.getText();
                File directory = new File(directoryPath);
                if (directory.exists() && directory.isDirectory()) {
                    logArea.setText("Removing malware from directory: " + directoryPath + "\n");
                    malwareScanner.removeMalware(directory, logArea);
                    malwareScanner.shutdownAndAwaitTermination();
                } else {
                    logArea.setText("Invalid directory: " + directoryPath + "\n");
                }
            }
        });

        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);

        gbc.gridx = 0;
        gbc.gridy = 0;
        panel.add(new JLabel("Directory:"), gbc);

        gbc.gridx = 1;
        panel.add(directoryField, gbc);

        gbc.gridx = 2;
        panel.add(browseButton, gbc);

        gbc.gridx = 3;
        panel.add(scanButton, gbc);

        gbc.gridx = 4;
        panel.add(removeButton, gbc);

        getContentPane().add(panel, BorderLayout.NORTH);
        getContentPane().add(scrollPane, BorderLayout.CENTER);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
}
